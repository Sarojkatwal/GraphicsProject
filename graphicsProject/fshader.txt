#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
}; 

struct DirLight {	
	vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct PointLight {
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;
	
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

#define NR_POINT_LIGHTS 4

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
in vec3 MatAmbi;
in vec3 MatDiff;
in vec3 MatSpec;
in float Shini;

uniform vec3 viewPos;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform SpotLight spotLight;
uniform Material material;
uniform int diffuseN;
uniform int specularN;
uniform int nrComponents_d;
uniform int nrComponents_sp;
uniform bool spot;

// function prototypes
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewPos ,vec3 FragPos );

void main()
{   
	if(diffuseN!=0){if(nrComponents_d==4){if(vec4(texture(material.texture_diffuse1,TexCoords)).w<0.1) discard;}}
    // properties
    vec3 norm = normalize(Normal);
   
    
    // phase 1: directional lighting

   vec3 result = CalcDirLight(dirLight, norm, viewPos,FragPos);
      
    
    FragColor = vec4(result, 1.0);
	//else FragColor = vec4(result, w);
	
}

// calculates the color when using a directional light.
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewPos,vec3 FragPos)
{
	 vec3 lightDir=normalize(light.position-FragPos);
     vec3 viewDir = normalize(viewPos - FragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir=normalize(lightDir + viewDir);
    float spec = pow(max(dot(normal, halfwayDir), 0.0), Shini);
    // combine results
	vec3 ambient = light.ambient;
	vec3 diffuse = light.diffuse * diff ;
	vec3 specular = light.specular * spec;
	
	if(diffuseN!=0)
	{
		 ambient *=  vec3(texture(material.texture_diffuse1, TexCoords));
		 diffuse *=  vec3(texture(material.texture_diffuse1, TexCoords));
	}
	else{
		ambient*=MatAmbi;
		diffuse*=MatDiff;
	}
	if(specularN!=0)
	specular *=  vec3(texture(material.texture_specular1, TexCoords));
	else specular*= MatSpec;

	return (ambient + diffuse + specular);
   
}

